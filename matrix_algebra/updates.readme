4/28/2024 great news :
-FFT is officially added into the library and 
I've put it under a lot of tests with normal fourier transform
(aka the fourier matrix multiplied by the data set) 

-Also updated the complex class to work with double instead of float because of tolerance issue

-I didn't add a padding function to make the algorithm work with non-powers of 2 
maybe later.

-note : the fft/fourier_mat are clock wise not counter clock wise 
(thought it would be important to mention it)

-It didn't crash at 2^30 data set but almost burnt my pc so don't do it 
Have fun :)

4/27/2024 huge updates after I slept:

1-performance boost I changed the data structure to be 1d array instead of 
2d array (cache utilization) now the most important function is at(int row_i,int col_i)

2-updated the class to be working with any standard data types (template class) and non standard 
data type (complex matrices and their results are tested but if there is any issue please let me 
know)

3-added complex class which performs all the essintial operations on complex numbers 

4-I didn't add complex class for the sake of complex matrices im working on adding 
fast forier transform 

5-updated transpose, dot, is_symmetric ,and others to work seamelessy with both 
standard and non standardtypes all thanks to overloaded conjugate that 
i added so that if the passed type is standard then it does nothing else 
if its complex then it produces the conjugate 

6-there are some new functions related to forier :-
  -forier_mat which returns forier matrix when passing a certain dimension
  -forier_diagonal which returns the main diagonal of forier in the form of a column matrix (i will use it in fft)
  -added some functions like arrange which arranges matrix rows at a certain sequnce you pass as an input
  and returns the matrix (will be used in fft)
  -at_quarter which puts a matrix at upper_left,lower_left,upper_right,lower_right quarters of a matrix
  of the caller the passed function must be less than or equal to quarter size of the caller matrix
  aka : if caller has 4x4 then the maximum size of passed matrix is 2x2 

7-updated other functions like fix_pivots to be more efficient in terms of memory usage and performance
now it utilizes a simple column of sequence that is obtained from gauss_down 

8-any functions that returns pivot indices aka gauss_down,rref,and others returns it in an <int> column matrix
also its optional aka pass an address of a matrix if you want the extra info.

9-matrix<int> ,matrix<complex> is how you initialize a matrix and that's probably all i have to say

10-feel free to use any code :)

11-now it doesn't crash at 500x5000 matrix matrix multiplication i'm currently running a 
10000x10000 matrix matrix multiplication and didn't crash as i'm writing these updates.

have fun!

4/27/2024 huge updates:
untill i declare it when you use the class
just do this -> matrix<data_type> mat instead of matrix
since now it works with any data type like int ,float , etc
and now works with non standard type complex
im trying to implement fast forier transform wish me luck 
also more updates tomorrow after i sleep
have a nice day :)
4/22/2024 small updates:
added cofactor which returns cofactor related to an element at the matrix 
added cofactors which returns cofactors matrix 

4/18/2024 small update:
1-added SubLambdaI which performs A-lambda *I and returns the result in more efficent manner
2-added eigen_vectors which returns eigen vectors of a system using eigen 
 values passed as an input as a column matrix 
3-Announcement :will try to add eigen_values in the near future since it
requires a lot of thought and work will try my best :)

4/13/2024 update:
fixed an issue that affected null space calculation if pivot positions were not in the left of rref now 
works properly for both cases for [0 1] & [1 0] it was a stupid mistake :)
                                  [0 0]   [0 0] 
4/11/2024 update:
very important!!!
1-fixed original pivots loctions recording when passing a matrix with old_locations parameter to gauss_down 
(aka you want the old locations of pivots during the elimination ),
to be a permutation matrix instead to record every row exchange happenning 
which fixes 2 important functions the fix_pivots , det 
for the det it was a sign issue but for fix_pivots it was a big deal since its used in calculation of the left null space 

4/10/2024 update:
1-added extract_col which allows you to extract a column at an index and put it in a matrix
2-added gram_shmidt which returns orthonormal vectors in a form of a matrix from a bunch (matrix) of independent columns 

4/9/2024 updates : 
1-added quality functions that allow for appending of 2 matrices one for appending 
by cols and the other for appending by rows and optimized some functions have fun.
2-added projection which returns projection matrix for a system of equations.
3-added fit_least_squares which performs a least squares fit to a given set of data points and returns the matrix .

older upadtes :
very important update : fix_pivots that rearranges matrix rows so that rows containing pivots are 
put on top and rest at the bottom function is really essintial if some functions that use gaussian 
elimination since some outputs might be wrong I'm not gonna force it but just so you know.

gaussian elimination downward or gauss_down now has an enum if you want the new pivots indices 
you just passa matrix and no need to pass extra values, if you want the old pivots indices then pass old_locations.




