# `bst` Class

## `__init__(self, data=None)`

Initializes the binary search tree (BST) node.

**Parameters:**
- `data`: The value of the node. Default is None.

**Attributes:**
- `left`: Reference to the left child node.
- `right`: Reference to the right child node.
- `parent`: Reference to the parent node.
- `data`: The value of the node.

**Usage:**
```python
# Example 1: Creating a node with a specific value
node_with_value = bst(42)

# Example 2: Creating a node with default value (None)
node_with_default_value = bst()

```markdown
# `insert(self, data)`

Inserts a new node into the binary search tree (BST).

**Parameters:**
- `data`: The value to be inserted into the tree.

**Usage:**
```python
# Example: Inserting a new node with value 42
bst_instance.insert(42)
```

This method iteratively traverses the BST to find the appropriate location for the new node based on the given data. If the data is less than or equal to the current node's data, it goes to the left child. If the data is greater than the current node's data, it goes to the right child. If the appropriate child is None, it inserts the new node at that position and updates the parent of the new node. This iterative approach ensures that the BST property is maintained.

---

# `search(self, data)`

Searches for a node with the specified data in the binary search tree (BST).

**Parameters:**
- `data`: The value to search for in the tree.

**Returns:**
A list where the first element is a boolean indicating whether the data was found, and the second element is the node containing the data if it was found, or None otherwise.

**Usage:**
```python
# Example: Searching for a node with value 42
result = bst_instance.search(42)
```

This method iteratively traverses the BST to find the node with the specified data. 
If the data is less than the current node's data, it goes to the left child.
If the data is greater than the current node's data, it goes to the right child. 
If it reaches a node with no appropriate child, it concludes that the data is not in the tree. 
The method returns a list with a boolean indicating whether the data was found and the corresponding node if found, or None otherwise.
```
```

# `replace(self, dest_data, src_data)`

Replaces a node with specified data (`dest_data`) in the binary search tree with a new node with different data (`src_data`).

**Parameters:**
- `dest_data`: The data of the node to be replaced.
- `src_data`: The data for the new node that will replace the old node.

**Returns:**
True if the replacement was successful, False otherwise.

**Usage:**
```python
# Example: Replacing a node with value 42 with a new node having value 50
success = bst_instance.replace(42, 50)
```

This method first searches for the node with `dest_data`. 
If the node is found and `src_data` is different from `dest_data`, 
it deletes the node with `dest_data` and inserts a new node with `src_data`. 
The method returns True if the replacement was successful, and False otherwise.

---

# `min(self)`

Returns the minimum data value in the binary search tree (BST).

**Returns:**
The minimum data value.

**Usage:**
```python
# Example: Getting the minimum value in the BST
min_value = bst_instance.min()
```

This method traverses the BST starting from the root and continuously moves to the left child until it reaches a node with no left child. This node will have the minimum value because, in a BST, all values to the left of a node are less than the node's value.

---

# `max(self)`

Returns the maximum data value in the binary search tree (BST).

**Returns:**
The maximum data value.

**Usage:**
```python
# Example: Getting the maximum value in the BST
max_value = bst_instance.max()
```

This method traverses the BST starting from the root and continuously moves to the right child until it reaches a node with no right child. This node will have the maximum value because, in a BST, all values to the right of a node are greater than the node's value.
```

```

# `is_left_child(self)`

Checks if the current node is a left child of the parent node.

**Returns:**
- True if the current node is a left child of the parent node.
- False otherwise.

**Usage:**
```python
# Example: Checking if the current node is a left child
is_left = bst_instance.is_left_child()
```

This method returns True if the current node is a left child of its parent node, and False otherwise.

---

# `is_right_child(self)`

Checks if the current node is a right child of the parent node.

**Returns:**
- True if the current node is a right child of the parent node.
- False otherwise.

**Usage:**
```python
# Example: Checking if the current node is a right child
is_right = bst_instance.is_right_child()
```

This method returns True if the current node is a right child of its parent node, and False otherwise.

---

# `update_parent_nodes(self, dest_node)`

Updates the parent node's left or right child according to the destination node.

If the current node is the left child of its parent, 
the parent's left child is updated to be the destination node. 
If the current node is the right child of its parent, 
the parent's right child is updated to be the destination node.

This method is primarily used in the `del_node` function to maintain the binary search tree properties after a node deletion.

**Parameters:**
- `dest_node`: The node to replace the current node in the parent's children.

**Usage:**
```python
# Example: Updating parent nodes after a node deletion
bst_instance.update_parent_nodes(destination_node)
```

This method efficiently updates the parent node's left or right child based on the destination node, 
ensuring the maintenance of binary search tree properties.
```
```

# `del_node(self, data)`

Deletes a node with the specified data from the binary search tree (BST).

**Parameters:**
- `data`: The data of the node to be deleted.

**Returns:**
True if the deletion was successful, False otherwise.

**Usage:**
```python
# Example: Deleting a node with value 42
success = bst_instance.del_node(42)
```

This method first searches for the node with the specified data in the BST. If the node is found, it performs the deletion operation based on the number of children the node has:
- If the node has no children, it updates the parent's left or right child reference to None.
- If the node has only a right child, it updates the child's parent reference and the parent's left or right child reference.
- If the node has only a left child, it updates the child's parent reference and the parent's left or right child reference.
- If the node has two children, it finds the minimum data in the right subtree, deletes the node with the minimum data, and replaces the data of the node to be deleted with the minimum data.

This method efficiently maintains the binary search tree properties after a node deletion.
```

```


# `del_bst(self, data=None)`

Deletes a subtree from the binary search tree (BST) if dat is provided. 
If no data is provided, the entire tree is deleted.

**Parameters:**
- `data`: The data of the root node of the subtree to be deleted. If None, the entire tree is deleted.

**Usage:**
```python
# Example: Deleting the entire BST
bst_instance.del_bst()

# Example: Deleting a subtree rooted at a node with value 42
bst_instance.del_bst(42)
```

This method efficiently deletes a subtree (or the entire tree) from a BST, 
maintaining the BST property and allowing the deleted nodes to be garbage collected. 
It uses a recursive helper function `del_all` to delete all nodes in the subtree.

---

*Note: The `del_bst` method uses the `search` method to find the root of the subtree to be deleted. Please refer to the documentation of the `search` method for more information.*
```

```markdown
# `parent(self, data)`

Returns the parent node's data of a node with the specified data in the binary search tree (BST).

**Parameters:**
- `data`: The value of the node for which the parent is to be found.

**Returns:**
- The data of the parent node if it exists.
- None if the node with the specified data does not exist or is the root of the tree.

**Usage:**
```python
# Example: Finding the parent of a node with value 42
parent_data = bst_instance.parent(42)
```

This method uses the `search` method to find the specified node in the BST and returns the data of its parent if it exists.

---

# `predecessor(self, data)`

Returns the predecessor of a node with the specified data in the binary search tree (BST).

**Parameters:**
- `data`: The value of the node for which the predecessor is to be found.

**Returns:**
- The data of the predecessor node if it exists.
- None if the node with the specified data does not exist or is the minimum value in the tree.

**Usage:**
```python
# Example: Finding the predecessor of a node with value 3
predecessor_data = bst_instance.predecessor(3)
```

In a sorted BST, the predecessor of a node is the maximum element in its left subtree. 
This method efficiently finds the predecessor, considering different cases such as having a left subtree, 
being a left child, or being a right child.

*Note: The `search` method is used to find the specified node in the BST.
Please refer to the documentation of the `search` method for more information.*
```
```


# `successor(self, data)`

Returns the successor of a node with the specified data in the binary search tree (BST).

**Parameters:**
- `data`: The value of the node for which the successor is to be found.

**Returns:**
- The data of the successor node if it exists.
- None if the node with the specified data does not exist or is the maximum value in the tree.

**Usage:**
```python
# Example: Finding the successor of a node with value 3
successor_data = bst_instance.successor(3)
```

In a sorted BST, the successor of a node is the minimum element in its right subtree. 
This method efficiently finds the successor, 
considering different cases such as having a right subtree, being a left child, or being a right child.

*Note: The `search` method is used to find the specified node in the BST. 
Please refer to the documentation of the `search` method for more information.*
```

```


# `inorder(self)`

Performs an in-order traversal of the binary search tree (BST).

**Usage:**
```python
# Example: In-order traversal of a BST
bst_instance.inorder()
```

In in-order traversal, the left child is visited first, followed by the current node, and then the right child. This method prints the nodes of the BST in ascending order of their data values.

---

# `postorder(self)`

Performs a post-order traversal of the binary search tree (BST).

**Usage:**
```python
# Example: Post-order traversal of a BST
bst_instance.postorder()
```

In post-order traversal, the left and right children are visited first, followed by the current node. 
This method prints the nodes of the BST in a sequence that is often useful for operations requiring processing after the children have been processed.

---

# `reverse_order(self)`

Displays the data on the binary search tree (BST) in descending order.

**Usage:**
```python
# Example: Reverse order traversal of a BST
bst_instance.reverse_order()
```

In reverse order traversal, the right child is visited first, followed by the current node, and then the left child. 
This method prints the nodes of the BST in descending order of their data values.

---

# `choose_order(self, order=None)`

Chooses the order of traversal for the binary search tree (BST).

**Parameters:**
- `order` (str): The order of traversal. Options are 'in' for in-order traversal, 'rev' for reverse order traversal, 'post' for post-order traversal. 
By default, it performs in-order traversal.

**Usage:**
```python
# Example: Choose reverse order traversal for a BST
bst_instance.choose_order('rev')
```

This method allows the user to specify the order of traversal.
If no order is provided or an invalid order is specified, it defaults to in-order traversal.
```
```


# `height(self, data=None)`

Recursively calculates the height of the binary search tree (BST).

**Parameters:**
- `data` (optional): The data of the root node of the subtree for which height needs to be calculated. If not provided, it calculates the height of the entire BST.

**Returns:**
- The height of the specified subtree or the entire BST.

**Usage:**
```python
# Example: Calculate the height of the entire BST
bst_instance.height()

# Example: Calculate the height of a subtree with a specific root node data
bst_instance.height(data=5)
```

This method calculates the height of the BST or a specified subtree. The height of a tree is defined as the length of the longest path from the root to a leaf node. The height is calculated recursively using a helper function.

```python
def get_height(self):
    left_height = -1
    right_height = -1

    if self.left is not None:
        left_height = get_height(self.left)

    if self.right is not None:
        right_height = get_height(self.right)

    return max([left_height, right_height]) + 1
```

The helper function `get_height` is used to recursively calculate the height of the tree.

---
```

```


# `depth(self, data=None)`

Returns the depth of a node in the binary search tree (BST). If no data is provided, the depth of the root node is returned (zero, of course).

**Parameters:**
- `data` (optional): The data of the node. If `None`, the depth of the root node is returned.

**Returns:**
- The depth of the specified node or the root node.

**Usage:**
```python
# Example: Calculate the depth of the entire BST
bst_instance.depth()

# Example: Calculate the depth of a specific node with a given data
bst_instance.depth(data=5)
```

This method calculates the depth of a specified node or the root node in the BST. The depth of a node is defined as the length of the path from the root node to the node in question. If the provided data does not exist in the BST, the method returns -1.
```
---
```


# `count(self, data=None)`

Returns the number of nodes in a subtree of the binary search tree (BST). If no data is provided, the number of nodes in the entire tree is returned.

**Parameters:**
- `data` (optional): The data of the root node of the subtree. If `None`, the number of nodes in the entire tree is returned.

**Returns:**
- The number of nodes in the specified subtree or the entire tree.

**Usage:**
```python
# Example: Count the number of nodes in the entire BST
bst_instance.count()

# Example: Count the number of nodes in a subtree with a specific root node data
bst_instance.count(data=5)
```

This method counts the number of nodes in the specified subtree or the entire BST. 
If no data is provided, it counts all nodes in the BST. If the provided data does not exist in the BST, the method returns 0.

```
---

